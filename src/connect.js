/**
 * Retrieves the translation of text.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/
 */
import {__} from '@wordpress/i18n';

import {useState, useRef, useEffect} from '@wordpress/element';

import {
	Button,
	TextControl,
	Notice,
	__experimentalText as Text,
	CheckboxControl,
	Icon,
	Spinner,
	Dashicon,
	FlexItem,
	Flex,
	ExternalLink,
	__experimentalHeading as Heading,
	Modal,
} from '@wordpress/components';

import demoImage from './imajinn-demo.jpg';
import {LicenseModal} from './license';

/**
 * The edit function describes the structure of your block in the context of the
 * editor. This represents what the editor will render when the block is used.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit
 *
 * @return {WPElement} Element to render.
 */
export function Connect(props) {
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [hasError, setError] = useState(null);
	const [errorCode, setErrorCode] = useState(null);
	const [email, setEmail] = useState(IMAJINN.email);
	const [password, setPassword] = useState('');
	const [signupEmail, setSignupEmail] = useState(false);
	const [signupTos, setSignupTos] = useState(false);

	//skip when connected
	if (props.isConnected) {
		return null;
	}

	//function to make an ajax call to the server to get the image
	const connectCall = () => {
		setIsSubmitting(true);
		setError(null);

		fetch(`${ajaxurl}?action=imajinn-connect`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				email: email,
				password: password,
				signup_tos: signupTos,
				signup_newsletter: signupEmail,
				nonce: IMAJINN.nonce,
			}),
		})
			.then((response) => response.json())
			.then((result) => {
				console.log(result);
				if (result.success) {
					props.setIsConnected(true);
					IMAJINN.connected = true;//set global variable in case block is reinitialized before refresh.
					props.setCredits(result.data.remaining_credits);
				} else {
					setIsSubmitting(false);
					setErrorCode(result.data[0].code);
					setError(result.data[0].message);
				}
			})
			.catch((error) => {
				setIsSubmitting(false);
				setError(error);
			});
	};

	const ErrorNotice = () => {
		if (hasError) {
			return (
				<Notice status="warning">
					<Text>
						{hasError}
						{errorCode === 'incorrect_password' && (
							<ExternalLink
								href="https://infiniteuploads.com/wp-login.php?action=lostpassword"
								target="_blank"
							>
								{__('Reset Password', 'imajinn-ai')}
							</ExternalLink>
						)}
					</Text>
				</Notice>
			);
		} else {
			return null;
		}
	};

	const SubmitButton = () => {
		if (isSubmitting) {
			return (
				<Button className="connect-button" disabled>
					<Spinner/>
				</Button>
			);
		} else {
			return (
				<Button
					className="connect-button"
					variant="primary"
					disabled={isSubmitting}
					onClick={() => {
						connectCall();
					}}
				>
					{__('Connect', 'imajinn-ai')}
				</Button>
			);
		}
	};

	const focusSelect = (event) => event.target.select();

	return (
		<>
			<img
				src={demoImage}
				alt={__(
					'Example images generated by Imajinn AI',
					'imajinn-ai'
				)}
				style={{width: '100%'}}
			/>
			<p>
				{__(
					"We hope you are excited to turn your imagination into creative media for your WordPress site. To get started please create a free account or login with your existing Infinite Uploads/Imajinn credentials and we'll connect your site to our cloud.",
					'imajinn-ai'
				)}
			</p>
			<ErrorNotice/>
			<Heading as="label">
				{__('Register / Login', 'imajinn-ai')}
			</Heading>
			<Flex align="bottom" wrap="true" className="connect-wrapper">
				<FlexItem>
					<TextControl
						label={__('Email', 'imajinn-ai')}
						type="email"
						value={email}
						onFocus={focusSelect}
						onChange={(value) => setEmail(value)}
						help={__(
							"You'll need a valid email to enable your credits.",
							'imajinn-ai'
						)}
					/>
					<TextControl
						label={__('Password', 'imajinn-ai')}
						type="password"
						autoComplete="off"
						value={password}
						onFocus={focusSelect}
						onChange={(value) => setPassword(value)}
					/>
				</FlexItem>
				<FlexItem>
					<CheckboxControl
						label={__(
							'I agree to the Terms of Service and Usage Restrictions:',
							'imajinn-ai'
						)}
						checked={signupTos}
						value={'1'}
						onChange={(value) => setSignupTos(value)}
					/>
					<div className="license-links">
						<LicenseModal
							buttonLabel={__(
								'Usage Restrictions',
								'imajinn-ai'
							)}
						/>
						<ExternalLink
							href="https://infiniteuploads.com/terms-of-service/"
							target="_blank"
						>
							{__('Terms of Service', 'imajinn-ai')}
						</ExternalLink>
						<ExternalLink
							href="https://infiniteuploads.com/privacy/"
							target="_blank"
						>
							{__('Privacy Policy', 'imajinn-ai')}
						</ExternalLink>
					</div>
					<CheckboxControl
						label={__(
							'Notify me about usage tips & new features (unsubscribe anytime)',
							'imajinn-ai'
						)}
						checked={signupEmail}
						value={'1'}
						onChange={(value) => setSignupEmail(value)}
					/>
				</FlexItem>
				<FlexItem>
					<SubmitButton/>
				</FlexItem>
			</Flex>
		</>
	);
}
